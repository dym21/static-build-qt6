name: msvc-static

on: [push, workflow_dispatch]

jobs:
  matrix_build:
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        arch: [win64, win32]
        buildtype: [debug-and-release, release]

    steps:
    - uses: actions/checkout@v4.2.2
    - uses: actions/setup-python@v5.6.0
    - run: python --version
    - name: Setup the compiler target win64
      if: startsWith(matrix.arch, 'win64')
      uses: TheMrMilchmann/setup-msvc-dev@v3
      with:
        arch: 'x64'

    - name: Setup the compiler target win32
      if: startsWith(matrix.arch, 'win32')
      uses: TheMrMilchmann/setup-msvc-dev@v3
      with:
        arch: 'amd64_x86'

    - name: Install ninja-build tool
      uses: seanmiddleditch/gha-setup-ninja@v6

    - name: Cache huge Qt repo
      id: cache-qt-repo
      uses: actions/cache@v4
      with:
        path: ${{ runner.workspace }}/qt-source
        key: qt-source-6.9.1

    - name: Clone Qt repo and its submodules
      working-directory: ${{ runner.workspace }}
      if: steps.cache-qt-repo.outputs.cache-hit != 'true'
      run: |
        # Clone Qt6 repo
        git clone git://code.qt.io/qt/qt5.git -b v6.9.1 --depth 1 qt-source
        cd qt-source
        git apply ${{ github.workspace }}/0001-shadow-clone-for-submodules.patch
        perl init-repository.pl --shallow

    - name: create build directory
      working-directory: ${{ runner.workspace }}
      run: mkdir qt-build

    - name: configure Qt for static build
      working-directory: ${{ runner.workspace }}/qt-build
      run: >
        ..\qt-source\configure.bat -${{ matrix.buildtype }} -static -static-runtime -no-pch -optimize-size -platform win32-msvc
        -prefix "..\qt-release" -confirm-license
        -no-feature-accessibility
        -no-feature-valgrind
        -no-feature-appstore-compliant
        -no-feature-assistant
        -no-feature-example-hwr
        -no-feature-windeployqt
        -no-feature-macdeployqt
        -no-feature-androiddeployqt
        -no-feature-qdbus
        -no-feature-qtdiag
        -no-feature-qtplugininfo
        -skip qtquick3dphysics,qtgraphs,qtquick3d,qtopcua,qtgrpc,qt3d,qtcanvas3d,qtdatavis3d,qtgamepad,qtcharts,qtconnectivity,qtmqtt,qtcoap,qtqa,qtdbus,qtremoteobjects,qtpim,qtspeech,qtfeedback,qtactiveqt,qtserialbus,qtserialport,tests
        -- -DFEATURE_cxx20=ON

    - name: build qt
      working-directory: ${{ runner.workspace }}/qt-build
      run: cmake --build . --parallel 4

    - name: install release qt to temp dir
      working-directory: ${{ runner.workspace }}/qt-build
      if: startsWith(matrix.buildtype, 'release')
      run: ninja install

    - name: install debug and release qt to temp dir
      working-directory: ${{ runner.workspace }}/qt-build
      if: startsWith(matrix.buildtype, 'debug-and-release')
      run: |
        ninja install:Debug
        ninja install:Release

    # Create archive of the pre-built Qt binaries
    - name: Package binaries
      working-directory: ${{ runner.workspace }}/qt-release
      run: 7z a ${{ github.workspace }}\\qt6_691_${{ matrix.arch }}-msvc2022_static-${{ matrix.buildtype }}.zip .

    - name: Release
      uses: softprops/action-gh-release@v2.2.2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: qt6_691_${{ matrix.arch }}-msvc2022_static-${{ matrix.buildtype }}.zip

    - name: Upload artifact
      uses: actions/upload-artifact@v4.6.2
      with:
        overwrite: true
        name: qt6_691_${{ matrix.arch }}-msvc2022_static-${{ matrix.buildtype }}
        path: ${{ runner.workspace }}/qt-release

